TreeNode<int>* LCAinaBST(TreeNode<int>* root, TreeNode<int>* P, TreeNode<int>* Q)
{
	if(!root)
        return NULL;

    if(root == P || root == Q)
        return root;
    
    TreeNode<int>* leftNode = LCAinaBST(root->left,P,Q);
    TreeNode<int>* rightNode = LCAinaBST(root->right,P,Q);

    if(leftNode && !rightNode)
        return leftNode;
    if(!leftNode && rightNode)
        return rightNode;
    if(leftNode && rightNode)
        return root;

    return NULL;
    
//Second Approach........................................................................................................................................

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        if(!root)
            return NULL;

        if(p->val < root->val && q->val < root->val)
            return lowestCommonAncestor(root->left,p,q);
        if(p->val > root->val && q->val > root->val)
            return lowestCommonAncestor(root->right,p,q);

        return root;
            
    }
};
