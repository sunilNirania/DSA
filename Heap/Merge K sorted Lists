 class compare{

     public:
     bool operator()(ListNode* a,ListNode* b){

         return a->val > b->val;

     }

 };
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        priority_queue<ListNode*,vector<ListNode*>,compare> minHeap;
    
        ListNode* head = new ListNode(-1);
        ListNode* temp = head;
        for(int i=0; i<lists.size(); i++)
            if(lists[i])
                minHeap.push(lists[i]);

        while(!minHeap.empty()){

            ListNode* currNode = minHeap.top();
            minHeap.pop();
            ListNode* newNode = new ListNode(currNode->val);
            temp->next = newNode;
            temp = temp->next;

            if(currNode->next){

                minHeap.push(currNode->next);

            }

        }

        return head->next;
    }
};
