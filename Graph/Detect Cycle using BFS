#include<bits/stdc++.h>


bool checkCycleBFS(unordered_map<int,list<int>>& adj,unordered_map<int,bool>& visited,int node){

    visited[node] = true;
    unordered_map<int,int> parent;
    parent[node] = -1;

    queue<int> q;
    q.push(node);

    while(!q.empty()){

        int frontNode = q.front();
        q.pop();

        for(auto neighbour : adj[frontNode]){

           if(visited[neighbour] == true && neighbour != parent[frontNode])
            return true;
           else if(!visited[neighbour]){

               q.push(neighbour);
               visited[neighbour] = true;
               parent[neighbour] = frontNode;
               
           }

        }

    }

    return false;
    

}

string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int,list<int>> adj;
    unordered_map<int,bool> visited;

    for(int i=0; i<m; i++){

        int u = edges[i][0];
        int v = edges[i][1];
        
        adj[u].push_back(v);
        adj[v].push_back(u);

    }

    for(int i=0; i<n; i++){

        if(visited[i] == false){

            bool check = checkCycleBFS(adj,visited,i);
            if(check)
                return "Yes";
            
        }
        
    }
    
    return "No";
}
