vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector<int> indegree(V);
	    for(int i=0; i<V; i++){
	        
	          for(auto adjacent : adj[i])
	            indegree[adjacent]++;
	        
	    }
	    
	    queue<int> q;
	    for(int i=0; i<V; i++)
	        if(indegree[i] == 0)
	            q.push(i);
	       
	   vector<int> ans;     
	    while(!q.empty()){
	        
	       int zeroIndegreeNode = q.front();
	       ans.push_back(zeroIndegreeNode);
	       q.pop();
	       for(auto adjacent : adj[zeroIndegreeNode]){
	           
	            indegree[adjacent]--;
	             if(indegree[adjacent]==0)
	                q.push(adjacent);
	           
	       }
	        
	    }
	    
	    return ans;
	}

// if you want to detect cycle in directed graph using BFS?
// you can do it using kahn's algorithem. just count the numbers of elements it printing or showing in topo sort if they are not equal to the total number of vertices that mean there exists a cycle
