   //adjacency list
   unordered_map<int,list<pair<int,int>>> adjList;
   for(int i=0; i<g.size(); i++){

       int u = g[i].first.first;
       int v = g[i].first.second;
       int w = g[i].second;

       adjList[u].push_back({v,w});
       adjList[v].push_back({u,w});

   }

   vector<int> key(n+1,INT_MAX);
   vector<int> parent(n+1,-1);
   vector<bool> mst(n+1,false);
    
   priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
   pq.push({0,1});

   key[1] = 0;
   parent[1] = -1;

   while(!pq.empty()){

       int u = pq.top().second;
       pq.pop();
       mst[u] = true;
       for(auto neighbour : adjList[u]){

           int v = neighbour.first;
           int w = neighbour.second;

           if(mst[v] == false && w < key[v]){

               key[v] = w;
               parent[v] = u;
               pq.push({w,v});

           }

       }

   }
   vector<pair<pair<int, int>, int>> result;
   for(int i=2; i<=n; i++){

       result.push_back({{parent[i],i},key[i]});

   }
    return result;
}
