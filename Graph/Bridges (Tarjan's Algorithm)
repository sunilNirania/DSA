class Solution {
public:

    void dfs(int node,vector<int> &time,vector<int> &low,vector<int> &parent,vector<bool> &visited,vector<vector<int>> &bridges,unordered_map<int,list<int>> &adjList,int &currTime){

        
        visited[node] = true;
        time[node] = currTime;
        low[node] = currTime;
        currTime++;
        for(auto neighbour : adjList[node]){

    
            if(!visited[neighbour]){

                parent[neighbour] = node;
                dfs(neighbour,time,low,parent,visited,bridges,adjList,currTime);
                low[node] = min(low[node],low[neighbour]);

                if(time[node] < low[neighbour])
                    bridges.push_back({node,neighbour});    


            }
            else if(neighbour != parent[node]){

                low[node] = min(low[node],low[neighbour]);

            }

        }
        

    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        
        // prepare adjacency list
        unordered_map<int,list<int>> adjList;
        for(int i=0; i<connections.size(); i++){

            int u = connections[i][0];
            int v = connections[i][1];

            adjList[u].push_back(v);
            adjList[v].push_back(u);

        }

        vector<vector<int>> bridges;
        vector<int> time(n,-1);
        vector<int> low(n,-1);
        vector<int> parent(n,-1);
        vector<bool> visited(n,false);
        int currTime = 0;

         dfs(0,time,low,parent,visited,bridges,adjList,currTime);

        return bridges;
    }
};
