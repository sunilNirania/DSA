#include<bits/stdc++.h>

bool dfsCycleCheck(vector<vector<int>>& edges,unordered_map<int,list<int>>& adjList,int node,int parent,unordered_map<int,bool>& visited){

    visited[node] = true;

    for(auto neighbour : adjList[node]){

        if(!visited[neighbour]){

            bool checkCycle = dfsCycleCheck(edges, adjList, neighbour, node,visited);
            if(checkCycle)
                return true;

        }
        else if(neighbour != parent)
            return true;

    }

    return false;

}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
   unordered_map<int,list<int>> adjList;
   unordered_map<int,bool> visited;

   for(int i=0; i<m; i++){

       int u = edges[i][0];
       int v = edges[i][1];

       adjList[u].push_back(v);
       adjList[v].push_back(u);

   }

   for(int i=0; i<n; i++){

       if(!visited[i]){

           int parent = -1;
           if(dfsCycleCheck(edges,adjList,i,parent,visited))
                return "Yes";

       }

   }

   return "No";
}
